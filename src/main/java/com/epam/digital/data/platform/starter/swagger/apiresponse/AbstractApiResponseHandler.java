package com.epam.digital.data.platform.starter.swagger.apiresponse;

import com.epam.digital.data.platform.starter.swagger.config.OpenApiResponseProperties;
import io.swagger.v3.oas.models.Operation;
import io.swagger.v3.oas.models.responses.ApiResponse;
import io.swagger.v3.oas.models.responses.ApiResponses;

import java.util.Collections;
import java.util.Optional;
import java.util.Set;

import org.springframework.context.support.MessageSourceAccessor;

public abstract class AbstractApiResponseHandler implements ApiResponseHandler {

  private final MessageSourceAccessor messageSourceAccessor;
  private final OpenApiResponseProperties openapiResponseProperties;

  protected AbstractApiResponseHandler(
      MessageSourceAccessor messageSourceAccessor,
      OpenApiResponseProperties openapiResponseProperties) {
    this.messageSourceAccessor = messageSourceAccessor;
    this.openapiResponseProperties = openapiResponseProperties;
  }

  @Override
  public void handle(Operation operation) {
    createResponsesForCodes(getPossibleCodes(), operation);
    setDescription(operation);
  }

  private void setDescription(Operation operation) {
    operation.setSummary(messageSourceAccessor.getMessage(getDescriptionCode()));
    operation.setDescription(
        messageSourceAccessor.getMessage(getDescriptionCode() + "-description"));
  }

  protected abstract String getDescriptionCode();

  protected Set<String> getPossibleCodes() {
    return openapiResponseProperties
        .getCodes()
        .getOrDefault(getDescriptionCode(), Collections.emptySet());
  }

  private ApiResponse getApiResponseForCode(String code, ApiResponses existingResponses) {
    ApiResponse apiResponse = existingResponses.getOrDefault(code, new ApiResponse());
    apiResponse.setDescription(messageSourceAccessor.getMessage(code));
    return apiResponse;
  }

  protected void createResponsesForCodes(Set<String> codes, Operation operation) {
    ApiResponses currentApiResponses =
        Optional.ofNullable(operation.getResponses()).orElse(new ApiResponses());
    removeRedundantAutoGeneratedResponses(currentApiResponses, codes);
    codes.forEach(
        code -> {
          ApiResponse apiResponse = getApiResponseForCode(code, currentApiResponses);
          currentApiResponses.addApiResponse(code, apiResponse);
        });
    operation.setResponses(currentApiResponses);
  }

  private void removeRedundantAutoGeneratedResponses(
      ApiResponses currentApiResponses, Set<String> necessaryResponseCodes) {
    currentApiResponses
        .entrySet()
        .removeIf(entry -> !necessaryResponseCodes.contains(entry.getKey()));
  }
}
